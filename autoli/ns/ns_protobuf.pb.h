// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autoli/ns/ns_protobuf.proto

#ifndef PROTOBUF_autoli_2fns_2fns_5fprotobuf_2eproto__INCLUDED
#define PROTOBUF_autoli_2fns_2fns_5fprotobuf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace autoli {
namespace ns {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_autoli_2fns_2fns_5fprotobuf_2eproto();
void protobuf_AssignDesc_autoli_2fns_2fns_5fprotobuf_2eproto();
void protobuf_ShutdownFile_autoli_2fns_2fns_5fprotobuf_2eproto();

class Node;
class RegisterInfo;
class RegisterRequest;
class QueryRequest;
class NodeInfo;
class QueryResponse;
class NotifyMessage;

// ===================================================================

class Node : public ::google::protobuf::Message {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();

  void Swap(Node* other);

  // implements Message ----------------------------------------------

  Node* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // optional uint32 weight = 3;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 3;
  inline ::google::protobuf::uint32 weight() const;
  inline void set_weight(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:autoli.ns.Node)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_weight();
  inline void clear_has_weight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint32 weight_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_autoli_2fns_2fns_5fprotobuf_2eproto();
  friend void protobuf_AssignDesc_autoli_2fns_2fns_5fprotobuf_2eproto();
  friend void protobuf_ShutdownFile_autoli_2fns_2fns_5fprotobuf_2eproto();

  void InitAsDefaultInstance();
  static Node* default_instance_;
};
// -------------------------------------------------------------------

class RegisterInfo : public ::google::protobuf::Message {
 public:
  RegisterInfo();
  virtual ~RegisterInfo();

  RegisterInfo(const RegisterInfo& from);

  inline RegisterInfo& operator=(const RegisterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterInfo& default_instance();

  void Swap(RegisterInfo* other);

  // implements Message ----------------------------------------------

  RegisterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegisterInfo& from);
  void MergeFrom(const RegisterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string domain = 1;
  inline bool has_domain() const;
  inline void clear_domain();
  static const int kDomainFieldNumber = 1;
  inline const ::std::string& domain() const;
  inline void set_domain(const ::std::string& value);
  inline void set_domain(const char* value);
  inline void set_domain(const char* value, size_t size);
  inline ::std::string* mutable_domain();
  inline ::std::string* release_domain();
  inline void set_allocated_domain(::std::string* domain);

  // repeated uint32 cmds = 2;
  inline int cmds_size() const;
  inline void clear_cmds();
  static const int kCmdsFieldNumber = 2;
  inline ::google::protobuf::uint32 cmds(int index) const;
  inline void set_cmds(int index, ::google::protobuf::uint32 value);
  inline void add_cmds(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cmds() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cmds();

  // optional .autoli.ns.Node node = 3;
  inline bool has_node() const;
  inline void clear_node();
  static const int kNodeFieldNumber = 3;
  inline const ::autoli::ns::Node& node() const;
  inline ::autoli::ns::Node* mutable_node();
  inline ::autoli::ns::Node* release_node();
  inline void set_allocated_node(::autoli::ns::Node* node);

  // @@protoc_insertion_point(class_scope:autoli.ns.RegisterInfo)
 private:
  inline void set_has_domain();
  inline void clear_has_domain();
  inline void set_has_node();
  inline void clear_has_node();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* domain_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cmds_;
  ::autoli::ns::Node* node_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_autoli_2fns_2fns_5fprotobuf_2eproto();
  friend void protobuf_AssignDesc_autoli_2fns_2fns_5fprotobuf_2eproto();
  friend void protobuf_ShutdownFile_autoli_2fns_2fns_5fprotobuf_2eproto();

  void InitAsDefaultInstance();
  static RegisterInfo* default_instance_;
};
// -------------------------------------------------------------------

class RegisterRequest : public ::google::protobuf::Message {
 public:
  RegisterRequest();
  virtual ~RegisterRequest();

  RegisterRequest(const RegisterRequest& from);

  inline RegisterRequest& operator=(const RegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterRequest& default_instance();

  void Swap(RegisterRequest* other);

  // implements Message ----------------------------------------------

  RegisterRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegisterRequest& from);
  void MergeFrom(const RegisterRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .autoli.ns.RegisterInfo infos = 1;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 1;
  inline const ::autoli::ns::RegisterInfo& infos(int index) const;
  inline ::autoli::ns::RegisterInfo* mutable_infos(int index);
  inline ::autoli::ns::RegisterInfo* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::autoli::ns::RegisterInfo >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::autoli::ns::RegisterInfo >*
      mutable_infos();

  // @@protoc_insertion_point(class_scope:autoli.ns.RegisterRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::autoli::ns::RegisterInfo > infos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_autoli_2fns_2fns_5fprotobuf_2eproto();
  friend void protobuf_AssignDesc_autoli_2fns_2fns_5fprotobuf_2eproto();
  friend void protobuf_ShutdownFile_autoli_2fns_2fns_5fprotobuf_2eproto();

  void InitAsDefaultInstance();
  static RegisterRequest* default_instance_;
};
// -------------------------------------------------------------------

class QueryRequest : public ::google::protobuf::Message {
 public:
  QueryRequest();
  virtual ~QueryRequest();

  QueryRequest(const QueryRequest& from);

  inline QueryRequest& operator=(const QueryRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryRequest& default_instance();

  void Swap(QueryRequest* other);

  // implements Message ----------------------------------------------

  QueryRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryRequest& from);
  void MergeFrom(const QueryRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string domains = 1;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 1;
  inline const ::std::string& domains(int index) const;
  inline ::std::string* mutable_domains(int index);
  inline void set_domains(int index, const ::std::string& value);
  inline void set_domains(int index, const char* value);
  inline void set_domains(int index, const char* value, size_t size);
  inline ::std::string* add_domains();
  inline void add_domains(const ::std::string& value);
  inline void add_domains(const char* value);
  inline void add_domains(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_domains();

  // @@protoc_insertion_point(class_scope:autoli.ns.QueryRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> domains_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_autoli_2fns_2fns_5fprotobuf_2eproto();
  friend void protobuf_AssignDesc_autoli_2fns_2fns_5fprotobuf_2eproto();
  friend void protobuf_ShutdownFile_autoli_2fns_2fns_5fprotobuf_2eproto();

  void InitAsDefaultInstance();
  static QueryRequest* default_instance_;
};
// -------------------------------------------------------------------

class NodeInfo : public ::google::protobuf::Message {
 public:
  NodeInfo();
  virtual ~NodeInfo();

  NodeInfo(const NodeInfo& from);

  inline NodeInfo& operator=(const NodeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeInfo& default_instance();

  void Swap(NodeInfo* other);

  // implements Message ----------------------------------------------

  NodeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeInfo& from);
  void MergeFrom(const NodeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string domain = 1;
  inline bool has_domain() const;
  inline void clear_domain();
  static const int kDomainFieldNumber = 1;
  inline const ::std::string& domain() const;
  inline void set_domain(const ::std::string& value);
  inline void set_domain(const char* value);
  inline void set_domain(const char* value, size_t size);
  inline ::std::string* mutable_domain();
  inline ::std::string* release_domain();
  inline void set_allocated_domain(::std::string* domain);

  // optional uint32 cmd = 2;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 2;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);

  // repeated .autoli.ns.Node nodes = 3;
  inline int nodes_size() const;
  inline void clear_nodes();
  static const int kNodesFieldNumber = 3;
  inline const ::autoli::ns::Node& nodes(int index) const;
  inline ::autoli::ns::Node* mutable_nodes(int index);
  inline ::autoli::ns::Node* add_nodes();
  inline const ::google::protobuf::RepeatedPtrField< ::autoli::ns::Node >&
      nodes() const;
  inline ::google::protobuf::RepeatedPtrField< ::autoli::ns::Node >*
      mutable_nodes();

  // @@protoc_insertion_point(class_scope:autoli.ns.NodeInfo)
 private:
  inline void set_has_domain();
  inline void clear_has_domain();
  inline void set_has_cmd();
  inline void clear_has_cmd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* domain_;
  ::google::protobuf::RepeatedPtrField< ::autoli::ns::Node > nodes_;
  ::google::protobuf::uint32 cmd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_autoli_2fns_2fns_5fprotobuf_2eproto();
  friend void protobuf_AssignDesc_autoli_2fns_2fns_5fprotobuf_2eproto();
  friend void protobuf_ShutdownFile_autoli_2fns_2fns_5fprotobuf_2eproto();

  void InitAsDefaultInstance();
  static NodeInfo* default_instance_;
};
// -------------------------------------------------------------------

class QueryResponse : public ::google::protobuf::Message {
 public:
  QueryResponse();
  virtual ~QueryResponse();

  QueryResponse(const QueryResponse& from);

  inline QueryResponse& operator=(const QueryResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryResponse& default_instance();

  void Swap(QueryResponse* other);

  // implements Message ----------------------------------------------

  QueryResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryResponse& from);
  void MergeFrom(const QueryResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .autoli.ns.NodeInfo infos = 1;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 1;
  inline const ::autoli::ns::NodeInfo& infos(int index) const;
  inline ::autoli::ns::NodeInfo* mutable_infos(int index);
  inline ::autoli::ns::NodeInfo* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::autoli::ns::NodeInfo >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::autoli::ns::NodeInfo >*
      mutable_infos();

  // @@protoc_insertion_point(class_scope:autoli.ns.QueryResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::autoli::ns::NodeInfo > infos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_autoli_2fns_2fns_5fprotobuf_2eproto();
  friend void protobuf_AssignDesc_autoli_2fns_2fns_5fprotobuf_2eproto();
  friend void protobuf_ShutdownFile_autoli_2fns_2fns_5fprotobuf_2eproto();

  void InitAsDefaultInstance();
  static QueryResponse* default_instance_;
};
// -------------------------------------------------------------------

class NotifyMessage : public ::google::protobuf::Message {
 public:
  NotifyMessage();
  virtual ~NotifyMessage();

  NotifyMessage(const NotifyMessage& from);

  inline NotifyMessage& operator=(const NotifyMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyMessage& default_instance();

  void Swap(NotifyMessage* other);

  // implements Message ----------------------------------------------

  NotifyMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyMessage& from);
  void MergeFrom(const NotifyMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .autoli.ns.NodeInfo dels = 1;
  inline int dels_size() const;
  inline void clear_dels();
  static const int kDelsFieldNumber = 1;
  inline const ::autoli::ns::NodeInfo& dels(int index) const;
  inline ::autoli::ns::NodeInfo* mutable_dels(int index);
  inline ::autoli::ns::NodeInfo* add_dels();
  inline const ::google::protobuf::RepeatedPtrField< ::autoli::ns::NodeInfo >&
      dels() const;
  inline ::google::protobuf::RepeatedPtrField< ::autoli::ns::NodeInfo >*
      mutable_dels();

  // repeated .autoli.ns.NodeInfo updates = 2;
  inline int updates_size() const;
  inline void clear_updates();
  static const int kUpdatesFieldNumber = 2;
  inline const ::autoli::ns::NodeInfo& updates(int index) const;
  inline ::autoli::ns::NodeInfo* mutable_updates(int index);
  inline ::autoli::ns::NodeInfo* add_updates();
  inline const ::google::protobuf::RepeatedPtrField< ::autoli::ns::NodeInfo >&
      updates() const;
  inline ::google::protobuf::RepeatedPtrField< ::autoli::ns::NodeInfo >*
      mutable_updates();

  // @@protoc_insertion_point(class_scope:autoli.ns.NotifyMessage)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::autoli::ns::NodeInfo > dels_;
  ::google::protobuf::RepeatedPtrField< ::autoli::ns::NodeInfo > updates_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_autoli_2fns_2fns_5fprotobuf_2eproto();
  friend void protobuf_AssignDesc_autoli_2fns_2fns_5fprotobuf_2eproto();
  friend void protobuf_ShutdownFile_autoli_2fns_2fns_5fprotobuf_2eproto();

  void InitAsDefaultInstance();
  static NotifyMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// Node

// optional string ip = 1;
inline bool Node::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Node::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Node::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Node::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& Node::ip() const {
  return *ip_;
}
inline void Node::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Node::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Node::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Node::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* Node::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Node::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 port = 2;
inline bool Node::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Node::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Node::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Node::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 Node::port() const {
  return port_;
}
inline void Node::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// optional uint32 weight = 3;
inline bool Node::has_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Node::set_has_weight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Node::clear_has_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Node::clear_weight() {
  weight_ = 0u;
  clear_has_weight();
}
inline ::google::protobuf::uint32 Node::weight() const {
  return weight_;
}
inline void Node::set_weight(::google::protobuf::uint32 value) {
  set_has_weight();
  weight_ = value;
}

// -------------------------------------------------------------------

// RegisterInfo

// optional string domain = 1;
inline bool RegisterInfo::has_domain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterInfo::set_has_domain() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterInfo::clear_has_domain() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterInfo::clear_domain() {
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    domain_->clear();
  }
  clear_has_domain();
}
inline const ::std::string& RegisterInfo::domain() const {
  return *domain_;
}
inline void RegisterInfo::set_domain(const ::std::string& value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
}
inline void RegisterInfo::set_domain(const char* value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
}
inline void RegisterInfo::set_domain(const char* value, size_t size) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    domain_ = new ::std::string;
  }
  domain_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegisterInfo::mutable_domain() {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    domain_ = new ::std::string;
  }
  return domain_;
}
inline ::std::string* RegisterInfo::release_domain() {
  clear_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = domain_;
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegisterInfo::set_allocated_domain(::std::string* domain) {
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    delete domain_;
  }
  if (domain) {
    set_has_domain();
    domain_ = domain;
  } else {
    clear_has_domain();
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated uint32 cmds = 2;
inline int RegisterInfo::cmds_size() const {
  return cmds_.size();
}
inline void RegisterInfo::clear_cmds() {
  cmds_.Clear();
}
inline ::google::protobuf::uint32 RegisterInfo::cmds(int index) const {
  return cmds_.Get(index);
}
inline void RegisterInfo::set_cmds(int index, ::google::protobuf::uint32 value) {
  cmds_.Set(index, value);
}
inline void RegisterInfo::add_cmds(::google::protobuf::uint32 value) {
  cmds_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RegisterInfo::cmds() const {
  return cmds_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RegisterInfo::mutable_cmds() {
  return &cmds_;
}

// optional .autoli.ns.Node node = 3;
inline bool RegisterInfo::has_node() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegisterInfo::set_has_node() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegisterInfo::clear_has_node() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegisterInfo::clear_node() {
  if (node_ != NULL) node_->::autoli::ns::Node::Clear();
  clear_has_node();
}
inline const ::autoli::ns::Node& RegisterInfo::node() const {
  return node_ != NULL ? *node_ : *default_instance_->node_;
}
inline ::autoli::ns::Node* RegisterInfo::mutable_node() {
  set_has_node();
  if (node_ == NULL) node_ = new ::autoli::ns::Node;
  return node_;
}
inline ::autoli::ns::Node* RegisterInfo::release_node() {
  clear_has_node();
  ::autoli::ns::Node* temp = node_;
  node_ = NULL;
  return temp;
}
inline void RegisterInfo::set_allocated_node(::autoli::ns::Node* node) {
  delete node_;
  node_ = node;
  if (node) {
    set_has_node();
  } else {
    clear_has_node();
  }
}

// -------------------------------------------------------------------

// RegisterRequest

// repeated .autoli.ns.RegisterInfo infos = 1;
inline int RegisterRequest::infos_size() const {
  return infos_.size();
}
inline void RegisterRequest::clear_infos() {
  infos_.Clear();
}
inline const ::autoli::ns::RegisterInfo& RegisterRequest::infos(int index) const {
  return infos_.Get(index);
}
inline ::autoli::ns::RegisterInfo* RegisterRequest::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::autoli::ns::RegisterInfo* RegisterRequest::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::autoli::ns::RegisterInfo >&
RegisterRequest::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::autoli::ns::RegisterInfo >*
RegisterRequest::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// QueryRequest

// repeated string domains = 1;
inline int QueryRequest::domains_size() const {
  return domains_.size();
}
inline void QueryRequest::clear_domains() {
  domains_.Clear();
}
inline const ::std::string& QueryRequest::domains(int index) const {
  return domains_.Get(index);
}
inline ::std::string* QueryRequest::mutable_domains(int index) {
  return domains_.Mutable(index);
}
inline void QueryRequest::set_domains(int index, const ::std::string& value) {
  domains_.Mutable(index)->assign(value);
}
inline void QueryRequest::set_domains(int index, const char* value) {
  domains_.Mutable(index)->assign(value);
}
inline void QueryRequest::set_domains(int index, const char* value, size_t size) {
  domains_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryRequest::add_domains() {
  return domains_.Add();
}
inline void QueryRequest::add_domains(const ::std::string& value) {
  domains_.Add()->assign(value);
}
inline void QueryRequest::add_domains(const char* value) {
  domains_.Add()->assign(value);
}
inline void QueryRequest::add_domains(const char* value, size_t size) {
  domains_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
QueryRequest::domains() const {
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
QueryRequest::mutable_domains() {
  return &domains_;
}

// -------------------------------------------------------------------

// NodeInfo

// optional string domain = 1;
inline bool NodeInfo::has_domain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeInfo::set_has_domain() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NodeInfo::clear_has_domain() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NodeInfo::clear_domain() {
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    domain_->clear();
  }
  clear_has_domain();
}
inline const ::std::string& NodeInfo::domain() const {
  return *domain_;
}
inline void NodeInfo::set_domain(const ::std::string& value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
}
inline void NodeInfo::set_domain(const char* value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
}
inline void NodeInfo::set_domain(const char* value, size_t size) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    domain_ = new ::std::string;
  }
  domain_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NodeInfo::mutable_domain() {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    domain_ = new ::std::string;
  }
  return domain_;
}
inline ::std::string* NodeInfo::release_domain() {
  clear_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = domain_;
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NodeInfo::set_allocated_domain(::std::string* domain) {
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    delete domain_;
  }
  if (domain) {
    set_has_domain();
    domain_ = domain;
  } else {
    clear_has_domain();
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 cmd = 2;
inline bool NodeInfo::has_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NodeInfo::set_has_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NodeInfo::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NodeInfo::clear_cmd() {
  cmd_ = 0u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 NodeInfo::cmd() const {
  return cmd_;
}
inline void NodeInfo::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// repeated .autoli.ns.Node nodes = 3;
inline int NodeInfo::nodes_size() const {
  return nodes_.size();
}
inline void NodeInfo::clear_nodes() {
  nodes_.Clear();
}
inline const ::autoli::ns::Node& NodeInfo::nodes(int index) const {
  return nodes_.Get(index);
}
inline ::autoli::ns::Node* NodeInfo::mutable_nodes(int index) {
  return nodes_.Mutable(index);
}
inline ::autoli::ns::Node* NodeInfo::add_nodes() {
  return nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::autoli::ns::Node >&
NodeInfo::nodes() const {
  return nodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::autoli::ns::Node >*
NodeInfo::mutable_nodes() {
  return &nodes_;
}

// -------------------------------------------------------------------

// QueryResponse

// repeated .autoli.ns.NodeInfo infos = 1;
inline int QueryResponse::infos_size() const {
  return infos_.size();
}
inline void QueryResponse::clear_infos() {
  infos_.Clear();
}
inline const ::autoli::ns::NodeInfo& QueryResponse::infos(int index) const {
  return infos_.Get(index);
}
inline ::autoli::ns::NodeInfo* QueryResponse::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::autoli::ns::NodeInfo* QueryResponse::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::autoli::ns::NodeInfo >&
QueryResponse::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::autoli::ns::NodeInfo >*
QueryResponse::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// NotifyMessage

// repeated .autoli.ns.NodeInfo dels = 1;
inline int NotifyMessage::dels_size() const {
  return dels_.size();
}
inline void NotifyMessage::clear_dels() {
  dels_.Clear();
}
inline const ::autoli::ns::NodeInfo& NotifyMessage::dels(int index) const {
  return dels_.Get(index);
}
inline ::autoli::ns::NodeInfo* NotifyMessage::mutable_dels(int index) {
  return dels_.Mutable(index);
}
inline ::autoli::ns::NodeInfo* NotifyMessage::add_dels() {
  return dels_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::autoli::ns::NodeInfo >&
NotifyMessage::dels() const {
  return dels_;
}
inline ::google::protobuf::RepeatedPtrField< ::autoli::ns::NodeInfo >*
NotifyMessage::mutable_dels() {
  return &dels_;
}

// repeated .autoli.ns.NodeInfo updates = 2;
inline int NotifyMessage::updates_size() const {
  return updates_.size();
}
inline void NotifyMessage::clear_updates() {
  updates_.Clear();
}
inline const ::autoli::ns::NodeInfo& NotifyMessage::updates(int index) const {
  return updates_.Get(index);
}
inline ::autoli::ns::NodeInfo* NotifyMessage::mutable_updates(int index) {
  return updates_.Mutable(index);
}
inline ::autoli::ns::NodeInfo* NotifyMessage::add_updates() {
  return updates_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::autoli::ns::NodeInfo >&
NotifyMessage::updates() const {
  return updates_;
}
inline ::google::protobuf::RepeatedPtrField< ::autoli::ns::NodeInfo >*
NotifyMessage::mutable_updates() {
  return &updates_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ns
}  // namespace autoli

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_autoli_2fns_2fns_5fprotobuf_2eproto__INCLUDED
